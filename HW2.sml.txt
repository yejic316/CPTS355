(****************************************)
(*      Name : Yeji Chung  (#11500446)  *)
(*      File : HW2.sml                  *)
(*      Due Date: 10.1.2018             *)
(****************************************)

(*Higher order functions*)
fun filter pred []=[]
| filter pred (x::rest) = if (pred x) then x::(filter pred rest) else (filter pred rest)

fun map f []=[]
| map f (x::rest) = (f x)::(map f rest);

fun fold f base []= base
| fold f base (x::rest) = f x (fold f base rest);

(*Problem 1*)
(* (a)     *)
fun numbersToSum sum L = 
let
	fun NTSum sum helpsum [] =[] 
	| NTSum sum helpsum (x::rest) = if (sum <= helpsum) then (NTSum sum helpsum rest) else x::(NTSum sum (helpsum + x) rest)
	fun deleteLast [] =[]
	| deleteLast (y::rest) = if (rest=[]) then (deleteLast rest) else y::(deleteLast rest)   	
in
deleteLast (NTSum sum 0 L)
end;

(* (b)     *)
fun numbersToSumTail sum L = 
let
	fun NTSum sum helpsum [] newL = newL
	| NTSum sum helpsum (x::rest) newL = if (sum <= helpsum) then newL else (NTSum sum (helpsum + x) rest (x::newL))
	
	fun deleteLast [] L2 =[]
	| deleteLast (y::[]) L2 = L2
	| deleteLast (y::rest) L2 = deleteLast rest (y::L2)  
	
	fun revappend [] L = L
	| revappend (x::rest) L = revappend rest (x::L)
in
revappend (deleteLast (revappend (NTSum sum 0 L []) []) []) []
end;


(*Problem 2*)
fun partition f L = 
let
	fun negf f x = if (f x) then false else true
	
	fun tuple f [] = ([],[])
	|tuple f L = ((filter f L),(filter (negf f) L))
in
tuple f L	
end;


(*Problem 3*)
fun areAllUnique L=
let
	
	fun countIL [] x cnt = cnt
	| countIL  (y::rest) x cnt = if (x=y) then (countIL rest x cnt+1) else (countIL rest x cnt)

	fun  countInList L x = countIL L x 0
	
	fun isOne x = if (x>1) then true else false 
	
	fun helpAllUnique isOne L= if (filter isOne (map (countInList L) L)) = []  then true else false 	
in
helpAllUnique isOne L
end;


(*Problem 4*)
(* (a)     *)
fun sum L = 
let
	fun f1 s a = s + a
	fun subsum L = fold f1 0 (map (fold f1 0) L)
in
subsum L
end;

(* (b)     *)
datatype intOption = SOME of int | NONE;
	
fun sumOption L =
let
	
	fun addop NONE NONE = NONE
	| addop NONE (SOME x) = SOME x
	| addop (SOME x) NONE = SOME x
	| addop (SOME x) (SOME y) = SOME (x+y)
	
	fun subLsum subopL = map (fold addop NONE) subopL
in
 fold addop NONE (subLsum L)
end;


(* (c)     *)
datatype either = IString of string | IInt of int;

fun sumEither L =
let
	fun str2int s = valOf(Int.fromString(s))
	
	fun addei (IInt x) (IInt y) = IInt (x+y)
	| addei (IInt x) (IString y) = IInt (x + (str2int y))
	| addei (IString x) (IInt y) = IInt ((str2int x) + y)
	| addei (IString x) (IString y) = IInt ((str2int x) + (str2int y))

	fun subLsum subL = map (fold addei (IInt 0)) subL
in
fold addei (IInt 0) (subLsum L)
end;



(*Problem 5*)
datatype 'a Tree = LEAF of 'a | NODE of 'a * ('a Tree) * ('a Tree);

(* (a)     *)

fun depthScan (LEAF r) = [r]
| depthScan (NODE (p, left, right)) = (depthScan left)@(depthScan right)@[p];

depthScan (NODE("Science",NODE ("and",LEAF "School", NODE("Engineering", LEAF "of",LEAF "Electrical")),LEAF "Computer"));
depthScan (NODE(1, NODE (2, NODE(3, (LEAF 4) ,(LEAF 5)),(LEAF 6)), NODE(7,LEAF 8,LEAF 9)));
depthScan (LEAF 4);


(* (b)     *)

fun depthSearch (LEAF r) num = if (num = r) then 1 else ~1
| depthSearch (NODE (p, left, right)) num = if (depthSearch left num)>(depthSearch right num) then 1+(depthSearch left num) else 1+(depthSearch right num);

val myT = NODE(1, NODE (2, NODE(3, LEAF 2 ,LEAF 5),LEAF 1), NODE(1,LEAF 8,LEAF 5));
depthSearch myT 1;
depthSearch myT 5;
depthSearch myT 8;
depthSearch myT 4;



(* (c)     *)
(* the problem 5-(c) did not work.. but I hope I can get some partial credit from these partial function*)
(*
val T1 = NODE(1, NODE (2, NODE(3, LEAF 4 ,LEAF 5),LEAF 6), NODE(7,LEAF 8,LEAF 9));
val T2 = NODE(1, NODE (2, LEAF 3, LEAF 6), NODE(7, NODE(8, LEAF 10 ,LEAF 11),LEAF 9));


fun addTrees T1 T2 =
let
	fun treemap f (LEAF r)  = LEAF (f r)
	| treemap f (NODE (p, left, right)) = NODE (p, (treemap f left), (treemap f right))
	
	fun addT (LEAF x) (LEAF y) = LEAF (x+y)
	| addT (LEAF x) (NODE (p, left1, right1)) = NODE ((x+p) , left1, right1)
	| addT (NODE (p, left1, right1)) (LEAF x) = NODE ((x+p) , left1, right1)
	| addT (NODE (p , left1, right1)) (NODE (q, left2, right2)) = NODE ((p+q) , left1, right1)
	
in
treemap addT T1 T2  
end;	

*)







(*----------------------Test Functions--------------*)
(* 1-(a) test   *)
fun numberToSumTest () =
let 
 val test1 = ((numbersToSum 10 [3,2,2,2,1,1]) = [3,2,2,2])
 val test2 = ((numbersToSum 5 [1,1,1,1,1,1,1])=[1,1,1,1])
in
 print ("\n-----Test Problem1 - numberToSum ------------ \n" ^
 " numberToSum test1: " ^ Bool.toString(test1) ^ "\n" ^
 " numberToSum test2: " ^ Bool.toString(test2) ^ "\n" )
end
val _ = numberToSumTest ();


(* 1-(b) test   *)
fun numberToSumTailTest () =
let 
 val test1 = ((numbersToSumTail 8 [3,2,2,2,1,1]) = [3,2,2])
 val test2 = ((numbersToSumTail 6 [1,1,1,1,1,1,1])=[1,1,1,1,1])
in
 print ("\n-----Test Problem1 - numberToSumTail ------------ \n" ^
 " numberToSumTail test1: " ^ Bool.toString(test1) ^ "\n" ^
 " numberToSumTail test2: " ^ Bool.toString(test2) ^ "\n" )
end
val _ = numberToSumTailTest ();


(* 2- test   *)
fun partitiontest () =
let 
fun exists n [] = false
| exists n (x::rest) = if n=x then true else (exists n rest)

 val test1 = ((partition (exists 2) [[1,3],[1,5],[3,4],[5,6,7]]) = ([], [[1,3],[1,5],[3,4],[5,6,7]]))
 val test2 = ((partition (fn x => (x>4)) [1,7,4,5,3,8,2,5,4,7,6,9,1,2,2,3]) = ([7,5,8,5,7,6,9],[1,4,3,2,4,1,2,2,3]))
in
 print ("\n-----Test Problem 2 - partition ------------ \n" ^
 " partition test1: " ^ Bool.toString(test1) ^ "\n" ^
 " partition test2: " ^ Bool.toString(test2) ^ "\n" )
end
val _ = partitiontest ();



(* 3- test   *)
fun areAllUniquetest () =
let 
 val test1 = ((areAllUnique [[1,2],[2,3],[],[3],[4,5],[]]) = false)
 val test2 = ((areAllUnique [1,3,4,2,6,7,5,8,9,1]) = false)
in
 print ("\n-----Test Problem 3 - areAllUnique ------------ \n" ^
 " areAllUnique test1: " ^ Bool.toString(test1) ^ "\n" ^
 " areAllUnique test2: " ^ Bool.toString(test2) ^ "\n" )
end
val _ = areAllUniquetest ();


(* 4-(a) test   *)
fun sumtest () =
let 
 val test1 = ((sum [[1,1,1,1,1],[1,1,1,1], [1,1,1], [1,1], [1]])= 15)
 val test2 = ((sum [[],[],[],[],[1,1,1], []]) = 3)
in
 print ("\n-----Test Problem 4 - sum ------------ \n" ^
 " sum test1: " ^ Bool.toString(test1) ^ "\n" ^
 " sum test2: " ^ Bool.toString(test2) ^ "\n" )
end
val _ = sumtest ();


(* 4-(b) test   *)
fun sumOptiontest () =
let 
 val test1 = ((sumOption [[SOME(10),NONE],[NONE,SOME(10)], [SOME(10), SOME(10), SOME(10)],[NONE,NONE,NONE]])= SOME (50))
 val test2 = ((sumOption [[],[NONE, SOME(1), NONE], [SOME(1)], [SOME(1), SOME(1), SOME(1), SOME(1)]]) = SOME (6))
in
 print ("\n-----Test Problem 4 - sumOption ------------ \n" ^
 " sumOption test1: " ^ Bool.toString(test1) ^ "\n" ^
 " sumOption test2: " ^ Bool.toString(test2) ^ "\n" )
end
val _ = sumOptiontest ();



(* 4-(c) test   *)
fun sumEithertest () =
let 
 val test1 = ((sumEither [[],[IString "100",IString "100",IInt 1,IString "100"], [IInt 1,IString "10"], [] ])= IInt (312))
 val test2 = ((sumEither [[IString "10" , IString "10" ],[IString "10" ],[IString "10"],[IString "10" ]]) = IInt (50))
in
 print ("\n-----Test Problem 4 - sumEither------------ \n" ^
 " sumEither test1: " ^ Bool.toString(test1) ^ "\n" ^
 " sumEither test2: " ^ Bool.toString(test2) ^ "\n" )
end
val _ = sumEithertest ();




