(****************************************)
(*      Name : Yeji Chung  (#11500446)  *)
(*      File : HW2.sml                  *)
(*      Due Date: 10.1.2018             *)
(****************************************)

(*Higher order functions*)
fun filter pred []=[]
| filter pred (x::rest) = if (pred x) then x::(filter pred rest) else (filter pred rest)

fun map f []=[]
| map f (x::rest) = (f x)::(map f rest);

fun fold f base []= base
| fold f base (x::rest) = f x (fold f base rest);

(*Problem 1*)
(* (a)     *)
fun numbersToSum sum L = 
let
	fun NTSum sum helpsum [] =[] 
	| NTSum sum helpsum (x::rest) = if (sum <= helpsum) then (NTSum sum helpsum rest) else x::(NTSum sum (helpsum + x) rest)
	fun deleteLast [] =[]
	| deleteLast (y::rest) = if (rest=[]) then (deleteLast rest) else y::(deleteLast rest)   	
in
deleteLast (NTSum sum 0 L)
end;

(* (b)     *)
fun numbersToSumTail sum L = 
let
	fun NTSum sum helpsum [] newL = newL
	| NTSum sum helpsum (x::rest) newL = if (sum <= helpsum) then newL else (NTSum sum (helpsum + x) rest (x::newL))
	
	fun deleteLast [] L2 =[]
	| deleteLast (y::[]) L2 = L2
	| deleteLast (y::rest) L2 = deleteLast rest (y::L2)  
	
	fun revappend [] L = L
	| revappend (x::rest) L = revappend rest (x::L)
in
revappend (deleteLast (revappend (NTSum sum 0 L []) []) []) []
end;

numbersToSum 100 [10, 20, 30, 40];
numbersToSum 30 [5, 4, 6, 10, 4, 2, 1, 5];
numbersToSum 1 [2];
numbersToSum 1 [];

numbersToSumTail 100 [10, 20, 30, 40];
numbersToSumTail 30 [5, 4, 6, 10, 4, 2, 1, 5];
numbersToSumTail 1 [2];
numbersToSumTail 1 [];

numbersToSum 10 [3,2,2,2,1,1];
numbersToSum 5 [1,1,1,1,1,1,1];

numbersToSumTail 10 [3,2,2,2,1,1];
numbersToSumTail 5 [1,1,1,1,1,1,1];




(*Problem 2*)
fun partition f L = 
let
	fun negf f x = if (f x) then false else true
	
	fun tuple f [] = ([],[])
	|tuple f L = ((filter f L),(filter (negf f) L))
in
tuple f L	
end;

partition (fn x => (x<=4)) [1,7,4,5,3,8,2,3];
partition null [[1,2],[1],[],[5],[],[6,7,8]];
fun exists n [] = false
| exists n (x::rest) = if n=x then true else (exists n rest);
partition (exists 1) [[1,2],[1],[],[5],[],[6,7,8]];
partition (fn x=> (x<=4)) [];


(*my ex*)
fun exists n [] = false
| exists n (x::rest) = if n=x then true else (exists n rest);
partition (exists 2) [[1,3],[1,5],[3,4],[5,6,7]];
partition (fn x => (x>4)) [1,7,4,5,3,8,2,5,4,7,6,9,1,2,2,3];











(*Problem 3*)
fun areAllUnique L=
let
	
	fun countIL [] x cnt = cnt
	| countIL  (y::rest) x cnt = if (x=y) then (countIL rest x cnt+1) else (countIL rest x cnt)

	fun  countInList L x = countIL L x 0
	
	fun isOne x = if (x>1) then true else false 
	
	fun helpAllUnique isOne L= if (filter isOne (map (countInList L) L)) = []  then true else false 	
in
helpAllUnique isOne L
end;

areAllUnique [1,3,4,2,5,0,10];
areAllUnique [[1,2],[3],[4,5],[]];
areAllUnique [(1,"one"),(2,"two"),(1,"one")];
areAllUnique [];
areAllUnique [1,2,3,4,1,7];

areAllUnique [[1,2],[2,3],[],[3],[4,5],[]];
areAllUnique [1,3,4,2,6,7,5,8,9,1];











(*Problem 4*)
(* (a)     *)
fun sum L = 
let
	fun f1 s a = s + a
	fun subsum L = fold f1 0 (map (fold f1 0) L)
in
subsum L
end;



sum [[1,1,1,1,1],[1,1,1,1], [1,1,1], [1,1], [1]];
sum [[],[],[],[],[1,1,1], []];

(((SOME a)::b)::rest)

(* (b)     *)
datatype intOption = SOME of int | NONE
	
fun sumOption L =
let
	
	fun addop NONE NONE = NONE
	| addop NONE (SOME x) = SOME x
	| addop (SOME x) NONE = SOME x
	| addop (SOME x) (SOME y) = SOME (x+y)
	
	fun subLsum subopL = map (fold addop NONE) subopL
in
 fold addop NONE (subLsum L)
end;


(*my ex*)
sumOption [[SOME(10),NONE],[NONE,SOME(10)], [SOME(10), SOME(10), SOME(10)],[NONE,NONE,NONE]];
sumOption [[],[NONE, SOME(1), NONE], [SOME(1)], [SOME(1), SOME(1), SOME(1), SOME(1)]];







(* (c)     *)
datatype either = IString of string | IInt of int

fun sumEither L =
let
	fun str2int s = valOf(Int.fromString(s))
	
	fun addei (IInt x) (IInt y) = IInt (x+y)
	| addei (IInt x) (IString y) = IInt (x + (str2int y))
	| addei (IString x) (IInt y) = IInt ((str2int x) + y)
	| addei (IString x) (IString y) = IInt ((str2int x) + (str2int y))

	fun subLsum subL = map (fold addei (IInt 0)) subL
in
fold addei (IInt 0) (subLsum L)
end;

sumEither [[],[IString "100",IString "100",IInt 1,IString "100"], [IInt 1,IString "10"], [] ];
sumEither [[IString "10" , IString "10" ],[IString "10" ],[IString "10"],[IString "10" ]];




(*Problem 5*)
datatype 'a Tree = LEAF of 'a | NODE of 'a * ('a Tree) * ('a Tree);

(* (a)     *)

fun depthScan (LEAF r) = [r]
| depthScan (NODE (p, left, right)) = (depthScan left)@(depthScan right)@[p]


depthScan (NODE("Science",NODE ("and",LEAF "School", NODE("Engineering", LEAF "of",LEAF "Electrical")),LEAF "Computer"));
depthScan (NODE(1, NODE (2, NODE(3, LEAF 4 ,LEAF 5),LEAF 6), NODE(7,LEAF 8,LEAF 9)));
depthScan (LEAF 4);


(* (b)     *)
fun depthSearch (LEAF r) num = if (num = r) then 1 else ~1
| depthSearch (NODE (p, left, right)) num = if (depthSearch left num)>(depthSearch right num) then 1+(depthSearch left num) else 1+(depthSearch right num);
val myT = NODE(1, NODE (6, NODE(3, LEAF 2 ,LEAF 5),LEAF 1), NODE(1,LEAF 8,LEAF 5));
depthSearch myT 1;
depthSearch myT 5;
depthSearch myT 8;
depthSearch myT 4;

depthSearch myT 6;


(*trash*******************************)
fun depthSearch T num = 
let
	fun Search num T 0 = ~1
	| Search num (LEAF r) level = if(num = r) then level else level-1
	| Search num (NODE (p, left, right)) level = if (num = p) then level else Search((Search num right level+1) (Search num left level+1) p)
	
in
Search num T 1 
end;

fun depthSearch T num = 
let
fun Search (LEAF r) num fonund = if (num = r) then 1 else ~1
| Search (NODE (p, left, right)) num found =
	if (((Search left num fonund)>(Search right num fonund)) andalso (num=p)) then (Search left num 1)+1
	else if ((Search left num fonund)>(Search right num fonund)) then (Search left num 0)+1
	else if (((Search left num fonund)<(Search right num fonund)) andalso (num=p)) then (Search right num 1)+1
	else (Search right num 0)+1
| Search (NODE (p, left, right)) num 1 =
	if ((Search left num 1)>(Search right num 1)) then (Search left num 1)+1
	else (Search right num 1)+1
	
in
Search T num 0
end;

fun depthSearch T num = 
let
fun Search (LEAF r) num = if (num = r) then (1,1) else (~1,0)
| Search (NODE (p, left, right)) num =
	if ((Search left num)>(Search right num)) then ((Search left num)+1)
	else (Search right num 0)+1)

fun isfound (level, found)= if (found = 0) then ~1 else level
	
in
isfound (Search T num 0) 
end;

depthSearch myT 1;
depthSearch myT 5;
depthSearch myT 8;
depthSearch myT 4;

depthSearch myT 6;








fun depthSearch (LEAF r) num = if (num = r) then 1 else ~1
| depthSearch (NODE (p, left, right)) num = 
	if (num=r) then 
	if (depthSearch left num)>(depthSearch right num) then 1+(depthSearch left num) 
	else 1+(depthSearch right num);




	if  ((depthSearch left num)= 0) then ~1 
	else if (depthSearch right num)= 0 then ~1


fun depthSearch (LEAF r) num = if (num = r) then 1 else ~1
| depthSearch (NODE (p, left, right)) num = 
let
	val level_left = 1+(depthSearch left num)
	val level_right = 1+(depthSearch right num)
	val level_root = depthSearch p num
in
if (level_left>level_right) then leve_left else level_right
end;


fun depthSearch (LEAF r) num = if (num = r) then 1 else ~1
| depthSearch (NODE (p, left, right)) num = 
let
	val level_left = 1+
	val level_right = 1+(depthSearch right num)
	fun level_root T num = if (level_left>level_right) then (depthSearch left num) else (depthSearch right num) 
in
if 
end;




val myT = NODE(1, NODE (6, NODE(3, LEAF 2 ,LEAF 5),LEAF 1), NODE(1,LEAF 8,LEAF 5));
depthSearch myT 1;
depthSearch myT 5;
depthSearch myT 8;
depthSearch myT 4;

depthSearch myT 6;
(*trash*******************************)


